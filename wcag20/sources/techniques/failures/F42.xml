<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE technique
  SYSTEM "../../xmlspec.dtd">
<technique id="F42">
   <short-name>Failure of Success Criterion 1.3.1 and 2.1.1 due to using scripting events to emulate links in a way that is not programmatically determinable</short-name>
   <applicability>
      <p>HTML and XHTML with Scripting.</p>
   </applicability>
   <applies-to>
      <success-criterion idref="content-structure-separation-programmatic"
                         relationship="failure"/>
      <success-criterion idref="keyboard-operation-keyboard-operable" relationship="failure"/>
      <success-criterion idref="keyboard-operation-all-funcs" relationship="failure"/>
      <!--success-criterion idref="ensure-compat-rsv"/-->
   </applies-to>
   <description>
      <p>This failure occurs when JavaScript event handlers are attached to elements
                        to ''emulate links''. A control or link created in this  manner cannot be tabbed to from the keyboard and does not gain keyboard focus like other controls and/or links.
            If scripting events are used to emulate links, user
                        agents including assistive technology may not be able to identify the links
                        in the content as links. They may not be recognized as interactive controls
                        by assistive technology, or they may be recognized as interactive controls
                        but still not recognized as links. Such elements do not appear in the links
                        list generated by user agents or assistive technology.</p>
      <p>The <code><![CDATA[<a href>]]></code> and <code><![CDATA[<area>]]></code>
                        elements are intended to mark up links.</p>
      <p>Attaching event handlers to elements that are not normally interactive, such
                        as <code><![CDATA[span]]></code> and <code><![CDATA[div]]></code>, can be quite disorienting to
                        users. Even if care is taken to provide keyboard access to such elements,
                        users may have a difficult time discovering that there are interactive
                        controls in the content or understanding what type of behavior to expect
                        from them. For example, users may not know which keystrokes are supported by
                        the script to activate the element. Additionally, these elements do not
                        generate the same operating system events as interactive elements, so
                        assistive technology may not be notified when the user activates them.</p>
   </description>
   <examples>
      <eg-group role="failure">
         <head>Scripting a <code><![CDATA[<span>]]></code> element</head>
         <description>
            <p>Scripted event handling is added to a <code><![CDATA[span]]></code> element so
                                that it functions as a link when clicked with a mouse. Assistive
                                technology does not recognize this element as a link.</p>
         </description>
         <code role="html401"><![CDATA[
<span onclick="this.location.href='newpage.html'">
    Fake link
</span>
]]></code>
      </eg-group>
      <eg-group role="failure">
         <head>Scripting an <code><![CDATA[<img>]]></code> element</head>
         <description>
            <p>Scripted event handling is added to an <code><![CDATA[img]]></code> element so
                                that it functions as a link when clicked with a mouse. Assistive
                                technology does not recognize this element as a link.</p>
         </description>
         <code role="html401"><![CDATA[
   <img src="go.gif" 
   alt="go to the new page" 
   onclick="this.location.href='newpage.html'">
]]></code>
      </eg-group>
      <eg-group role="failure">
         <head>Scripting an <code><![CDATA[<img>]]></code> element, with keyboard
                            support</head>
         <description>
            <p>Scripted event handling is added to an <code><![CDATA[img]]></code> element so
                                that it functions as a link. In this example, the link functionality
                                can be invoked with the mouse or via the Enter key if the user agent
                                includes the element in the tab chain. Nevertheless, the element
                                will not be recognized as a link.</p>
         </description>
         <code role="html401"><![CDATA[
function doNav(url)
{
   window.location.href = url;
}

function doKeyPress(url)
{
   //if the enter key was pressed
   if (window.event.type == "keypress" &&
       window.event.keyCode == 13)
   {
      doNav(url);
   }
}
]]></code>
         <description>
            <p>The markup for the image is:</p>
         </description>
         <code role="html401"><![CDATA[
<p>
	<img src="bargain.jpg"
		tabindex="0" 
		alt="View Bargains"
		onclick="doNav('viewbargains.html');"
		onkeypress="doKeyPress('viewbargains.html');">
</p>
]]></code>
      </eg-group>
      <eg-group role="failure">
         <head>Scripting a <code><![CDATA[<div>]]></code> element</head>
         <description>
            <p>This example uses script to make a <code><![CDATA[div]]></code> element behave
                                like a link. Although the author has provided complete keyboard
                                access and separated the event handlers from the markup to enable
                                repurposing of the content, the <code><![CDATA[div]]></code> element will not be
                                recognized as a link by assistive technology.</p>
         </description>
         <code role="html401"><![CDATA[
window.onload = init;

function init()
{
	var objAnchor = document.getElementById('linklike');

	objAnchor.onclick = function(event){return changeLocation(event,
'surveyresults.html');};
	objAnchor.onkeypress = function(event){return changeLocation(event,
'surveyresults.html');};
}

function changeLocation(objEvent, strLocation)
{
	var iKeyCode;

	if (objEvent && objEvent.type == 'keypress')
	{
		if (objEvent.keyCode)
			iKeyCode = objEvent.keyCode;
		else if (objEvent.which)
			iKeyCode = objEvent.which;

		if (iKeyCode != 13 && iKeyCode != 32)
			return true;
	}

	window.location.href = strLocation;
}
]]></code>
         <description>
            <p>The markup for the <code><![CDATA[div]]></code> element is:</p>
         </description>
         <code role="html401"><![CDATA[
<div id="linklike">
View the results of the survey.
</div>
]]></code>
      </eg-group>
   </examples>
   <resources>
      <see-also>
         <ulist>
            <item>
               <p>
                  <loc xmlns:xlink="http://www.w3.org/1999/xlink"
                       href="http://www.w3.org/TR/wai-aria/">Accessible Rich Internet Applications (WAI-ARIA) Version 1.0</loc>
               </p>
            </item>
         </ulist>
      </see-also>
   </resources>
   <related-techniques>
      <relatedtech idref="G115"/>
   </related-techniques>
   <tests>
      <procedure>
         <olist>
            <item>
               <p>Check whether there are JavaScript event handlers on an element
                                    that emulates a link.</p>
            </item>
            <item>
               <p>Check whether the programmatically determined role of the element
                                    is <emph>link</emph>.</p>
            </item>
         </olist>
      </procedure>
      <expected-results>
         <ulist>
            <item>
               <p>If check #1 is true and check #2 is false, then this failure
                                    condition applies and content fails the Success Criterion.</p>
            </item>
         </ulist>
      </expected-results>
   </tests>
</technique>
